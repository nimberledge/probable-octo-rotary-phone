let rubric_version = "1.0"
let rubric_title = "CS421 Fall 2016 ML4"

(**************************************************************************
 * You can add new test cases by adding new elements to the following lists
 * Format is:
 * TEST<X>ARG(<weight>, <function_name>, <arg1>, <arg2>, ..., <argX>)
 *
 * <X> is the number of argument that the function being tested takes.
 **************************************************************************)

(* Test cases should go in this list.
 * The first element of the pair is the weight of the case,
 * and the second is the string to be given to the parser.
 *)

let fail_get_all_tokens_stu s = try Util.timer 4 (fun () -> Student.try_get_all_tokens s) with _ -> None
let fail_get_all_tokens s = try Util.timer 4 (fun () -> Solution.try_get_all_tokens s) with _ -> None

let rubric = [

  (* Student Tests *)
  TEST1ARG(1, get_all_tokens, "let = in + , ; ( - )");

  TEST1ARG(1, get_all_tokens, "42 0 7");
  TEST1ARG(1, get_all_tokens, "0b110100101");
  TEST1ARG(1, get_all_tokens, "0x8844ffaa11");
  TEST1ARG(1, get_all_tokens, "3.14 100.5 1.414");
  TEST1ARG(1, get_all_tokens, "2.7e10");

  TEST1ARG(1, get_all_tokens, "this is where if");

  TEST1ARG(1, get_all_tokens, "this (* is a *) test");
  TEST1ARG(1, get_all_tokens, "this // is a test");
  TEST1ARG(1, get_all_tokens, "this // is a\n test");
  TEST1ARG(1, try_get_all_tokens, "this (* is (* a test *)");

(* Problem 1 *)

  TEST1ARG(1, get_all_tokens, "~ * / +. -. *. /. ^ ");
  TEST1ARG(1, get_all_tokens, " < > <= >= <> | -> ;;"); 
  TEST1ARG(1, get_all_tokens, ":: @ [] rec and end if then");
  TEST1ARG(1, get_all_tokens, "else fun mod raise try with not && ");
  TEST1ARG(1, get_all_tokens, "|| ] [ true false ()  ");

(* Probelm 2 *)
  TEST1ARG(1, get_all_tokens, "57 23 197 012983475");
  TEST1ARG(1, get_all_tokens, "0b10100011 0b0 0b111 0b0011 0bbb10100011 0b b111 0b0011b5 0x4a3d2fbc13e  0x12009347645 0xabcdefedcba 0x");
  TEST1ARG_TWOFUN(1, fail_get_all_tokens, fail_get_all_tokens_stu, ".053  530.");
  TEST1ARG(1, get_all_tokens, "123.45 00.44 44.00 ");
  TEST1ARG(1, get_all_tokens, "123.456e7890 555.e0 0.e001");


(* Problem 3 (Repetative) *)
  TEST1ARG(3, get_all_tokens, "true false () truefalse (())");

(* Problem 4 *)
  TEST1ARG(1, get_all_tokens, "this is where if");
  TEST1ARG(1, get_all_tokens, "n_______'");
  TEST1ARG(1, get_all_tokens, "i'm identifying_you");
  TEST1ARG(1, get_all_tokens, "salamthen elsebeGOOD");
  TEST1ARG(1, get_all_tokens, "ifthen truefalse letrec funin");
  TEST1ARG(1, get_all_tokens, "12345s");
  TEST1ARG_TWOFUN(1, fail_get_all_tokens, fail_get_all_tokens_stu, "s12345 S12345");
  TEST1ARG_TWOFUN(1, fail_get_all_tokens, fail_get_all_tokens_stu, "_alam");
  TEST1ARG_TWOFUN(1, fail_get_all_tokens, fail_get_all_tokens_stu, "Salam");
  TEST1ARG_TWOFUN(1, fail_get_all_tokens, fail_get_all_tokens_stu, "'alam");

(* Problem 5 *)
  TEST1ARG(1, get_all_tokens, "//(* (*TEst*) \n let");
  TEST1ARG(1, get_all_tokens, "(*  \\ let come \n have \n \\ *)");
  TEST1ARG(1, try_get_all_tokens, "this (* is (* a (* so (* so *) test *) *) of nested comments *) for sure");
  TEST1ARG(1, try_get_all_tokens, "this is (* a test *) of unmatched close comment *) maybe");

(* Problem 6 *)


  TEST1ARG(1, get_all_tokens, "\"some string\"");
  TEST1ARG(1, get_all_tokens, "\" she said, \\\"hello\\\"\"");
  TEST1ARG(1, get_all_tokens, "\"a line \\n starts here; indent \\t starts here next string\" \"starts here\"");
  TEST1ARG(1, get_all_tokens, "\"Hello, \\n \\ world! \"");
  TEST1ARG(1, get_all_tokens, "\" \\100 \\001 \"");

  TEST1ARG(2, get_all_tokens, "\" \\171 \\249 \"");
  TEST1ARG_TWOFUN(1, fail_get_all_tokens, fail_get_all_tokens_stu, "\" \\281 \"");
  TEST1ARG_TWOFUN(1, fail_get_all_tokens, fail_get_all_tokens_stu, "\" \\999 \"");
  TEST1ARG(1, get_all_tokens, "\" \\1039 \\2504503 \"");
  TEST1ARG_TWOFUN(1, fail_get_all_tokens, fail_get_all_tokens_stu, "\" \\ \n \t \\ \"");
  TEST1ARG(1, get_all_tokens, "then hi \"by \\\n  \t  \\t well?\"");
  TEST1ARG_TWOFUN(2, fail_get_all_tokens, fail_get_all_tokens_stu, "\"\"\"");
  TEST1ARG(2, get_all_tokens, " \"some\" , \"salam\" ");
  TEST1ARG_TWOFUN(1, fail_get_all_tokens, fail_get_all_tokens_stu, " \"\\6\" ");
  TEST1ARG_TWOFUN(1, fail_get_all_tokens, fail_get_all_tokens_stu, " \"\\x26\" ");

  TEST1ARG(1, get_all_tokens, "\"1111111111111111111\"           ");  
  TEST1ARG(2, get_all_tokens, "\" (*Hello*)\" ");
  TEST1ARG(2, get_all_tokens, "\" // \" ");
  TEST1ARG(2, get_all_tokens, "\" if let\"  if let ");
  TEST1ARG(2, get_all_tokens, "\"\"           ")
]

let extra_rubric = [
]
