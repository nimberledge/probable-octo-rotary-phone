# 1 "token.mll"
 
open Common;;


# 7 "token.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\209\255\210\255\211\255\005\000\213\255\001\000\000\000\
    \001\000\001\000\001\000\003\000\011\000\012\000\005\000\002\000\
    \003\000\001\000\232\255\005\000\006\000\001\000\239\255\005\000\
    \006\000\002\000\003\000\007\000\004\000\253\255\254\255\255\255\
    \248\255\236\255\247\255\246\255\245\255\238\255\241\255\240\255\
    \215\255\234\255\233\255\231\255\007\000\230\255\022\000\001\000\
    \229\255\013\000\028\000\220\255\030\000\228\255\016\000\032\000\
    \227\255\032\000\223\255\225\255\226\255\017\000\034\000\026\000\
    \224\255\036\000\219\255\208\255\031\000\030\000\222\255\026\000\
    \041\000\207\255\043\000\221\255\028\000\041\000\218\255\030\000\
    \217\255\216\255\206\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\043\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\041\000\255\255\255\255\020\000\018\000\255\255\013\000\
    \012\000\006\000\005\000\004\000\003\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_default =
   "\255\255\000\000\000\000\000\000\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\255\255\255\255\
    \000\000\255\255\255\255\000\000\255\255\000\000\255\255\255\255\
    \000\000\255\255\000\000\000\000\000\000\255\255\255\255\255\255\
    \000\000\255\255\000\000\000\000\255\255\255\255\000\000\255\255\
    \255\255\000\000\255\255\000\000\255\255\255\255\000\000\255\255\
    \000\000\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\031\000\031\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \031\000\000\000\000\000\000\000\000\000\000\000\006\000\081\000\
    \004\000\003\000\026\000\028\000\002\000\027\000\082\000\025\000\
    \036\000\035\000\032\000\000\000\000\000\034\000\000\000\000\000\
    \000\000\000\000\019\000\020\000\024\000\022\000\023\000\042\000\
    \018\000\041\000\039\000\038\000\037\000\033\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\017\000\000\000\005\000\043\000\001\000\
    \000\000\014\000\068\000\046\000\048\000\013\000\010\000\047\000\
    \044\000\012\000\076\000\062\000\016\000\009\000\007\000\079\000\
    \074\000\059\000\015\000\052\000\011\000\061\000\069\000\008\000\
    \054\000\060\000\055\000\045\000\021\000\040\000\029\000\049\000\
    \050\000\051\000\053\000\057\000\056\000\058\000\065\000\063\000\
    \064\000\067\000\066\000\071\000\070\000\072\000\073\000\075\000\
    \077\000\078\000\080\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\000\000\006\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\
    \025\000\026\000\028\000\255\255\255\255\027\000\255\255\255\255\
    \255\255\255\255\000\000\000\000\000\000\000\000\000\000\019\000\
    \000\000\020\000\023\000\024\000\024\000\027\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\000\000\017\000\000\000\
    \255\255\000\000\010\000\015\000\047\000\000\000\000\000\015\000\
    \016\000\000\000\008\000\011\000\000\000\000\000\000\000\007\000\
    \009\000\012\000\000\000\014\000\000\000\011\000\010\000\000\000\
    \013\000\012\000\013\000\044\000\000\000\021\000\000\000\046\000\
    \049\000\050\000\052\000\054\000\055\000\057\000\061\000\062\000\
    \063\000\065\000\061\000\068\000\069\000\071\000\072\000\074\000\
    \076\000\077\000\079\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 15 "token.mll"
                    ( token lexbuf )
# 144 "token.ml"

  | 1 ->
# 16 "token.mll"
                    ( EOF )
# 149 "token.ml"

  | 2 ->
# 17 "token.mll"
                    ( NEG )
# 154 "token.ml"

  | 3 ->
# 18 "token.mll"
                    ( PLUS )
# 159 "token.ml"

  | 4 ->
# 19 "token.mll"
                    ( MINUS )
# 164 "token.ml"

  | 5 ->
# 20 "token.mll"
                    ( TIMES )
# 169 "token.ml"

  | 6 ->
# 21 "token.mll"
                    ( DIV )
# 174 "token.ml"

  | 7 ->
# 22 "token.mll"
                    ( DPLUS )
# 179 "token.ml"

  | 8 ->
# 23 "token.mll"
                    ( DMINUS )
# 184 "token.ml"

  | 9 ->
# 24 "token.mll"
                    ( DTIMES )
# 189 "token.ml"

  | 10 ->
# 25 "token.mll"
                    ( DDIV )
# 194 "token.ml"

  | 11 ->
# 26 "token.mll"
                    ( CARAT )
# 199 "token.ml"

  | 12 ->
# 27 "token.mll"
                    ( LT )
# 204 "token.ml"

  | 13 ->
# 28 "token.mll"
                    ( GT )
# 209 "token.ml"

  | 14 ->
# 29 "token.mll"
                    ( LEQ )
# 214 "token.ml"

  | 15 ->
# 30 "token.mll"
                    ( GEQ )
# 219 "token.ml"

  | 16 ->
# 31 "token.mll"
                    ( EQUALS )
# 224 "token.ml"

  | 17 ->
# 32 "token.mll"
                    ( NEQ )
# 229 "token.ml"

  | 18 ->
# 33 "token.mll"
                    ( PIPE )
# 234 "token.ml"

  | 19 ->
# 34 "token.mll"
                    ( ARROW )
# 239 "token.ml"

  | 20 ->
# 35 "token.mll"
                    ( SEMI )
# 244 "token.ml"

  | 21 ->
# 36 "token.mll"
                    ( DSEMI )
# 249 "token.ml"

  | 22 ->
# 37 "token.mll"
                    ( DCOLON )
# 254 "token.ml"

  | 23 ->
# 38 "token.mll"
                    ( AT )
# 259 "token.ml"

  | 24 ->
# 39 "token.mll"
                    ( NIL )
# 264 "token.ml"

  | 25 ->
# 40 "token.mll"
                    ( LET )
# 269 "token.ml"

  | 26 ->
# 41 "token.mll"
                    ( REC )
# 274 "token.ml"

  | 27 ->
# 42 "token.mll"
                    ( AND )
# 279 "token.ml"

  | 28 ->
# 43 "token.mll"
                    ( END )
# 284 "token.ml"

  | 29 ->
# 44 "token.mll"
                    ( IN )
# 289 "token.ml"

  | 30 ->
# 45 "token.mll"
                    ( IF )
# 294 "token.ml"

  | 31 ->
# 46 "token.mll"
                    ( THEN )
# 299 "token.ml"

  | 32 ->
# 47 "token.mll"
                    ( ELSE )
# 304 "token.ml"

  | 33 ->
# 48 "token.mll"
                    ( FUN )
# 309 "token.ml"

  | 34 ->
# 49 "token.mll"
                    ( MOD )
# 314 "token.ml"

  | 35 ->
# 50 "token.mll"
                    ( RAISE )
# 319 "token.ml"

  | 36 ->
# 51 "token.mll"
                    ( TRY )
# 324 "token.ml"

  | 37 ->
# 52 "token.mll"
                    ( WITH )
# 329 "token.ml"

  | 38 ->
# 53 "token.mll"
                    ( NOT )
# 334 "token.ml"

  | 39 ->
# 54 "token.mll"
                    ( LOGICALAND )
# 339 "token.ml"

  | 40 ->
# 55 "token.mll"
                    ( LOGICALOR )
# 344 "token.ml"

  | 41 ->
# 56 "token.mll"
                    ( LBRAC )
# 349 "token.ml"

  | 42 ->
# 57 "token.mll"
                    ( RBRAC )
# 354 "token.ml"

  | 43 ->
# 58 "token.mll"
                    ( LPAREN )
# 359 "token.ml"

  | 44 ->
# 59 "token.mll"
                    ( RPAREN )
# 364 "token.ml"

  | 45 ->
# 60 "token.mll"
                    ( COMMA )
# 369 "token.ml"

  | 46 ->
# 61 "token.mll"
                    ( UNDERSCORE )
# 374 "token.ml"

  | 47 ->
# 62 "token.mll"
                    ( TRUE )
# 379 "token.ml"

  | 48 ->
# 63 "token.mll"
                    ( FALSE )
# 384 "token.ml"

  | 49 ->
# 64 "token.mll"
                    ( UNIT )
# 389 "token.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

# 71 "token.mll"
 (* do not modify this function: *)
 let lextest s = token (Lexing.from_string s)

 let get_all_tokens s =
     let b = Lexing.from_string (s^"\n") in
     let rec g () =
     match token b with EOF -> []
     | t -> t :: g () in
     g ()

let try_get_all_tokens s =
    try (Some (get_all_tokens s), true)
    with Failure "unmatched open comment" -> (None, true)
       | Failure "unmatched closed comment" -> (None, false)
 
# 412 "token.ml"
